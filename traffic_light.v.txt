module traffic_light_controller (
    input clk,
    input reset,
    output reg [1:0] ns_light,  // 00 = Red, 01 = Yellow, 10 = Green
    output reg [1:0] ew_light
);

    // State encoding using localparam (instead of typedef enum)
    localparam NS_GREEN  = 2'b00;
    localparam NS_YELLOW = 2'b01;
    localparam EW_GREEN  = 2'b10;
    localparam EW_YELLOW = 2'b11;

    reg [1:0] state, next_state;
    reg [3:0] timer;

    // Clock-driven state update
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= NS_GREEN;
            timer <= 0;
        end else begin
            state <= next_state;
            timer <= (timer == 4'd9) ? 0 : timer + 1;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            NS_GREEN:    next_state = (timer == 4'd5) ? NS_YELLOW : NS_GREEN;
            NS_YELLOW:   next_state = (timer == 4'd2) ? EW_GREEN : NS_YELLOW;
            EW_GREEN:    next_state = (timer == 4'd5) ? EW_YELLOW : EW_GREEN;
            EW_YELLOW:   next_state = (timer == 4'd2) ? NS_GREEN : EW_YELLOW;
            default:     next_state = NS_GREEN;
        endcase
    end

    // Output logic
    always @(*) begin
        case (state)
            NS_GREEN: begin
                ns_light = 2'b10; // Green
                ew_light = 2'b00; // Red
            end
            NS_YELLOW: begin
                ns_light = 2'b01; // Yellow
                ew_light = 2'b00; // Red
            end
            EW_GREEN: begin
                ns_light = 2'b00; // Red
                ew_light = 2'b10; // Green
            end
            EW_YELLOW: begin
                ns_light = 2'b00; // Red
                ew_light = 2'b01; // Yellow
            end
            default: begin
                ns_light = 2'b00;
                ew_light = 2'b00;
            end
        endcase
    end

endmodule
