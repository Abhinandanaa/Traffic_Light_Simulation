module traffic_light_controller (
    input clk,
    input reset,
    output reg [1:0] ns_light,  // 00 = Red, 01 = Yellow, 10 = Green
    output reg [1:0] ew_light
);

    parameter NS_GREEN_TIME  = 5;
    parameter NS_YELLOW_TIME = 2;
    parameter EW_GREEN_TIME  = 5;
    parameter EW_YELLOW_TIME = 2;
    parameter TIMER_MAX      = 9;

    // State encoding using localparam
    localparam NS_GREEN  = 2'b00;
    localparam NS_YELLOW = 2'b01;
    localparam EW_GREEN  = 2'b10;
    localparam EW_YELLOW = 2'b11;

    reg [1:0] state, next_state;
    reg [3:0] timer;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= NS_GREEN;
            timer <= 0;
        end else begin
            state <= next_state;
            timer <= (timer == TIMER_MAX) ? 0 : timer + 1;
        end
    end

    always @(*) begin
        case (state)
            NS_GREEN:  next_state = (timer == NS_GREEN_TIME)  ? NS_YELLOW : NS_GREEN;
            NS_YELLOW: next_state = (timer == NS_YELLOW_TIME) ? EW_GREEN  : NS_YELLOW;
            EW_GREEN:  next_state = (timer == EW_GREEN_TIME)  ? EW_YELLOW : EW_GREEN;
            EW_YELLOW: next_state = (timer == EW_YELLOW_TIME) ? NS_GREEN  : EW_YELLOW;
            default:   next_state = NS_GREEN;
        endcase
    end

    // Output logic unchanged...
endmodule
